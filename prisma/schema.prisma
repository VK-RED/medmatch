// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  chats         Chat[]
  conversations Conversation[]
  minutesLeft   MinutesLeft?
}

model Chat {
  id            String         @id @default(cuid())
  title         String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  conversations Conversation[]
  completed     Boolean        @default(false)
}

model Conversation {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      Role
}

model MinutesLeft {
  id      String @id @default(cuid())
  minutes Int
  user    User   @relation(fields: [userId], references: [id])
  userId  String @unique
}

enum Role {
  system
  user
  assistant
}
